var N=null,E="",T="t",U="u",searchIndex={};
var R=["message","result","sender","irro::arduino","irro::arduino::cmd","update","irro::arduino::binary","try_into","try_from","borrow_mut","irro::arduino::cmd::led","type_id","irro::arduino::cmd::motor","irro::logging","borrow","typeid","Connection","MotorPowerRatio","IrroLogger"];

searchIndex["irro"]={"doc":E,"i":[[0,"api","irro","This module implements REST API running on Irro's onboard…",N,N],[5,"run_http_server","irro::api","Start HTTP API server in blocking mode.",N,[[[R[0]],[R[2],[R[0]]]],[R[1]]]],[0,"arduino","irro","This module implements communication between Irro's…",N,N],[0,"binary",R[3],"This module implements asynchronous binary communication…",N,N],[3,"Message",R[6],"This struct represent an individual command which could be…",N,N],[3,R[16],E,"An asynchronous connecting to the Arduino.",N,N],[17,"ARDUINO_BUFFER_SIZE",E,"Size of Arduino serial port buffer. See Arduino Docs.",N,N],[11,"new",E,"Construct a new message from command number and command…",0,[[["u16"],["vec",["u8"]],["u8"]]]],[11,"init_from_device",E,"Initiate an asynchronous \"connection\" to the Arduino. This…",1,[[["str"]],[[R[1],[R[2],"error"]],["error"],[R[2],[R[0]]]]]],[0,"cmd",R[3],"Implementation of individual commands for Arduino. Please…",N,N],[0,"led",R[4],"Implementation of LED commands.",N,N],[3,"LedMask",R[10],"Bit mask of which LEDs are turned on/off. LED 0 is mapped…",N,N],[11,"from_bools",E,"Construct the bit mask from a vector of bools.",2,[[["vec",["bool"]],["bool"]],["self"]]],[11,"read",E,"Obtain current LED setup from Arduino.",2,[[[R[2]]],["self"]]],[11,"send",E,"Command Arduino turn on/off LEDs with this mask.",2,[[["self"],[R[2]]]]],[0,"motor",R[4],"Implementation of motor commands.",N,N],[3,R[17],R[12],"Power ratio of Irro's left and right motor.",N,N],[11,"from_floats",E,"Construct the struct from two floats between -1.0 (max…",3,[[["f32"]],["self"]]],[11,"send",E,"Command Arduino to set motor power ratio to this.",3,[[["self"],[R[2]]]]],[0,"logging","irro",E,N,N],[3,R[18],R[13],E,N,N],[0,"network","irro",E,N,N],[5,"start_broadcasting","irro::network","Start a new thread sending periodic broadcast messages (in…",N,[[],[R[1]]]],[0,R[5],"irro",E,N,N],[5,R[5],"irro::update",E,N,[[["path"]]]],[11,"from",R[6],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[8],E,E,0,[[[U]],[R[1]]]],[11,R[7],E,E,0,[[],[R[1]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[15]]]],[11,"vzip",E,E,0,[[],["v"]]],[11,R[7],E,E,0,[[],[R[1]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[8],E,E,1,[[[U]],[R[1]]]],[11,R[7],E,E,1,[[],[R[1]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[15]]]],[11,"vzip",E,E,1,[[],["v"]]],[11,R[7],E,E,1,[[],[R[1]]]],[11,"from",R[10],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[8],E,E,2,[[[U]],[R[1]]]],[11,R[7],E,E,2,[[],[R[1]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[15]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,R[7],E,E,2,[[],[R[1]]]],[11,"from",R[12],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[8],E,E,3,[[[U]],[R[1]]]],[11,R[7],E,E,3,[[],[R[1]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[15]]]],[11,"vzip",E,E,3,[[],["v"]]],[11,R[7],E,E,3,[[],[R[1]]]],[11,"from",R[13],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[8],E,E,4,[[[U]],[R[1]]]],[11,R[7],E,E,4,[[],[R[1]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[15]]]],[11,"vzip",E,E,4,[[],["v"]]],[11,R[7],E,E,4,[[],[R[1]]]],[11,"into",R[10],E,2,[[],[["bool"],["vec",["bool"]]]]],[11,"enabled",R[13],E,4,[[["metadata"],["self"]],["bool"]]],[11,"log",E,E,4,[[["self"],["record"]]]],[11,"flush",E,E,4,[[["self"]]]]],"p":[[3,"Message"],[3,R[16]],[3,"LedMask"],[3,R[17]],[3,R[18]]]};
searchIndex["irro_cli"]={"doc":E,"i":[],"p":[]};
initSearch(searchIndex);addSearchOptions(searchIndex);